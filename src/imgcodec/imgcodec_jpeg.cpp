#include "imgcodec_jpeg.hpp"
#include <setjmp.h>

extern "C" {
#include "jpeglib.h"
}

namespace lycan {

static unsigned char my_jpeg_odml_dht[0x1a4] = {
    0xff, 0xc4, 0x01, 0xa2,

    0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,

    0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,

    0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04,
    0x04, 0x00, 0x00, 0x01, 0x7d,
    0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
    0x13, 0x51, 0x61, 0x07,
    0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1,
    0x15, 0x52, 0xd1, 0xf0,
    0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a,
    0x25, 0x26, 0x27, 0x28,
    0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49,
    0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65,
    0x66, 0x67, 0x68, 0x69,
    0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85,
    0x86, 0x87, 0x88, 0x89,
    0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
    0xa4, 0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
    0xc2, 0xc3, 0xc4, 0xc5,
    0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
    0xd9, 0xda, 0xe1, 0xe2,
    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4,
    0xf5, 0xf6, 0xf7, 0xf8,
    0xf9, 0xfa,

    0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04,
    0x04, 0x00, 0x01, 0x02, 0x77,
    0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,
    0x51, 0x07, 0x61, 0x71,
    0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09,
    0x23, 0x33, 0x52, 0xf0,
    0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17,
    0x18, 0x19, 0x1a, 0x26,
    0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44,
    0x45, 0x46, 0x47, 0x48,
    0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64,
    0x65, 0x66, 0x67, 0x68,
    0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83,
    0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a,
    0xa2, 0xa3, 0xa4, 0xa5,
    0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8,
    0xb9, 0xba, 0xc2, 0xc3,
    0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
    0xd7, 0xd8, 0xd9, 0xda,
    0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4,
    0xf5, 0xf6, 0xf7, 0xf8,
    0xf9, 0xfa
};

struct JpegSession {
    jpeg_decompress_struct cinfo;
    struct jpeg_error_mgr err;
    jmp_buf setjmp_buf;
    JpegSession() {
        memset(&cinfo, 0, sizeof(cinfo));
        memset(&err, 0, sizeof(err));
        memset(&setjmp_buf, 0, sizeof(setjmp_buf));
    }
};

void error_exit(j_common_ptr cinfo) {
    jmp_buf* jmpbuff = (jmp_buf*)(cinfo->err + 1);

    longjmp(*jmpbuff, 1);
}

ImageDecoderJpeg::ImageDecoderJpeg() {

}

ImageDecoderJpeg::~ImageDecoderJpeg() {
    close();
}

Result ImageDecoderJpeg::readHeader() {
    Result res(-1);

    JpegSession* session = new JpegSession;
    m_jpegSession = session;
    
    session->cinfo.err = jpeg_std_error(&session->err);
    session->err.error_exit = error_exit;

    if (setjmp(session->setjmp_buf) == 0) {
        jpeg_create_decompress(&session->cinfo);
        
        m_fp = fopen(m_filename.c_str(), "rb");
        if (m_fp) {
            jpeg_stdio_src(&session->cinfo, m_fp);
        }

        if (session->cinfo.src != 0) {
            jpeg_read_header(&session->cinfo, TRUE);

            session->cinfo.scale_num = 1;
            session->cinfo.scale_denom = 1;
            jpeg_calc_output_dimensions(&session->cinfo);

            m_width = session->cinfo.output_width;
            m_height = session->cinfo.output_height;
            // RGB or gray
            m_type = session->cinfo.num_components > 1 ? 2 : 1;

            res.reset(0);
        }
    }

    if (res.fail()) {
        close();
    }

    return res;
}

Result ImageDecoderJpeg::readData() {
    Result res(-1);
    bool hasColor = m_type > 1;// TODO: ÓÐÑÕÉ«

    if (m_jpegSession && m_width && m_height) {
        jpeg_decompress_struct* cinfo = &((JpegSession*)m_jpegSession)->cinfo;
        ((JpegSession*)m_jpegSession)->err;
        if (setjmp(((JpegSession*)m_jpegSession)->setjmp_buf) == 0) {
            // mjpeg
            if (cinfo->ac_huff_tbl_ptrs[0] == NULL
                && cinfo->ac_huff_tbl_ptrs[1] == NULL
                && cinfo->dc_huff_tbl_ptrs[0] == NULL
                && cinfo->dc_huff_tbl_ptrs[1] == NULL) {
                // load huffman table
            }
        } 
    }
    return res;
}

void ImageDecoderJpeg::close() {
    //jpeg_destroy_decompress(&cinfo);

    if (m_fp) {
        fclose(m_fp);
        m_fp = nullptr;
    }

    m_width = 0;
    m_height = 0;
    m_type = -1;
}

}